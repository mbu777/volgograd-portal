generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(EDITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id          String       @id @default(cuid())
  title       String
  description String?
  category    DocumentCategory
  date        DateTime?
  filePath    String?
  externalUrl String?
  version     String?
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  serviceRegulations Service[] @relation("ServiceRegulations")
  programDocs        Program[] @relation("ProgramDocs")
  projectDocs        Project[] @relation("ProjectDocs")
  oneStopAttachments OneStopStep[] @relation("OneStopAttachments")
}

model Service {
  id              String           @id @default(cuid())
  title           String
  summary         String?
  termDays        Int?
  fee             String?
  deliveryMethods DeliveryMethod[]
  isPublished     Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  regulations Service_Document[]
  contacts    Service_Contact[]
  seoMeta     SeoMeta?
}

model Program {
  id           String        @id @default(cuid())
  title        String
  body         String?
  periodFrom   DateTime?
  periodTo     DateTime?
  participation String?
  department   String?
  status       ProgramStatus @default(ACTIVE)
  isPublished  Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  docs     Program_Document[]
  contacts Program_Contact[]
  seoMeta  SeoMeta?
}

model Project {
  id             String    @id @default(cuid())
  title          String
  slug           String    @unique
  summary        String?
  body           String?
  sector         String?
  tags           String[]
  status         ProjectStatus @default(PLANNED)
  yearStart      Int?
  yearEnd        Int?
  capex          Float?
  currency       String?
  address        String?
  lat            Float?
  lng            Float?
  coverImagePath String?
  isPublished    Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  gallery ProjectImage[]
  docs    Project_Document[]
  seoMeta SeoMeta?
}

model ProjectImage {
  id        String  @id @default(cuid())
  projectId String
  filePath  String
  alt       String?
  order     Int     @default(0)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Tender {
  id               String      @id @default(cuid())
  title            String
  shortDescription String
  bannerPath       String?
  externalUrl      String
  dateStart        DateTime
  deadline         DateTime
  organizer        String?
  status           TenderStatus @default(OPEN)
  isPublished      Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  contacts Tender_Contact[]
  seoMeta  SeoMeta?
}

model OneStopStep {
  id         String      @id @default(cuid())
  title      String
  body       String?
  slaValue   Int?
  slaUnit    SlaUnit?
  department String?
  order      Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  attachments OneStopStep_Document[]
}

model Contact {
  id        String   @id @default(cuid())
  fullName  String
  position  String?
  phone     String?
  email     String?
  photoPath String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  services Service_Contact[]
  programs Program_Contact[]
  tenders  Tender_Contact[]
}

model SeoMeta {
  id          String     @id @default(cuid())
  entityType  EntityType
  entityId    String     @unique
  title       String?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  service Service? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  program Program? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  tender  Tender?  @relation(fields: [entityId], references: [id], onDelete: Cascade)
}

model KrtRequest {
  id        String           @id @default(cuid())
  payload   String // JSON
  files     String[] // file paths
  status    KrtRequestStatus @default(NEW)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

// Junction tables
model Service_Document {
  serviceId  String
  documentId String

  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  document Document @relation("ServiceRegulations", fields: [documentId], references: [id], onDelete: Cascade)

  @@id([serviceId, documentId])
}

model Service_Contact {
  serviceId String
  contactId String

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@id([serviceId, contactId])
}

model Program_Document {
  programId  String
  documentId String

  program  Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  document Document @relation("ProgramDocs", fields: [documentId], references: [id], onDelete: Cascade)

  @@id([programId, documentId])
}

model Program_Contact {
  programId String
  contactId String

  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@id([programId, contactId])
}

model Project_Document {
  projectId  String
  documentId String

  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  document Document @relation("ProjectDocs", fields: [documentId], references: [id], onDelete: Cascade)

  @@id([projectId, documentId])
}

model Tender_Contact {
  tenderId  String
  contactId String

  tender  Tender  @relation(fields: [tenderId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@id([tenderId, contactId])
}

model OneStopStep_Document {
  stepId     String
  documentId String

  step     OneStopStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  document Document    @relation("OneStopAttachments", fields: [documentId], references: [id], onDelete: Cascade)

  @@id([stepId, documentId])
}

// Enums
enum Role {
  ADMIN
  EDITOR
}

enum DocumentCategory {
  STANDARD
  GUIDELINE
  PROTOCOL
  OTHER
}

enum DeliveryMethod {
  ONLINE
  MFC
  ONE_WINDOW
  IN_PERSON
}

enum ProgramStatus {
  ACTIVE
  FINISHED
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
}

enum TenderStatus {
  OPEN
  CLOSED
}

enum SlaUnit {
  DAYS
  WEEKS
}

enum EntityType {
  PAGE
  PROJECT
  SERVICE
  PROGRAM
  TENDER
}

enum KrtRequestStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  REJECTED
}
